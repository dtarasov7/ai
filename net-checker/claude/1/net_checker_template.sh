#!/bin/bash
# templates/net_checker.sh.j2
# Network connectivity checker script
# Generated by Ansible net-checker role

set -euo pipefail

# Configuration
MODE="{{ net_checker_mode }}"
{% if net_checker_mode == 'tcp' %}
TCP_PORT="{{ net_checker_tcp_port }}"
{% endif %}
TIMEOUT="{{ net_checker_timeout }}"
{% if net_checker_mode == 'icmp' %}
PING_COUNT="{{ net_checker_ping_count }}"
{% endif %}

# Source server info
SOURCE_HOSTNAME="{{ inventory_hostname }}"
SOURCE_IP="{{ ansible_default_ipv4.address | default(inventory_hostname) }}"

# Metrics labels
ENV="{{ net_checker_env }}"
IS="{{ net_checker_is }}"
INSTANCE="{{ inventory_hostname }}"
JOB="{{ net_checker_job }}"
CHECK_ID="{{ net_checker_check_id }}"

# Target hosts
declare -A TARGET_HOSTS
{% for host in net_checker_target_hosts %}
{% if host is mapping %}
TARGET_HOSTS["{{ host.name }}"]="{{ host.ip | default(host.name) }}"
{% else %}
TARGET_HOSTS["{{ host }}"]="{{ host }}"
{% endif %}
{% endfor %}

# Output file
{% if net_checker_work_mode == 1 %}
OUTPUT_FILE="{{ net_checker_textcollector_dir }}/net_checker_{{ net_checker_check_id }}.prom"
TEMP_FILE="/tmp/net_checker_{{ net_checker_check_id }}.prom.tmp"
{% else %}
OUTPUT_FILE="/dev/stdout"
TEMP_FILE="/tmp/net_checker_{{ net_checker_check_id }}.prom.tmp"
{% endif %}

# Function to check ICMP connectivity
check_icmp() {
    local target_name="$1"
    local target_ip="$2"
    local success=0
    local response_time=0
    
    if ping -c "$PING_COUNT" -W "$TIMEOUT" "$target_ip" >/dev/null 2>&1; then
        success=1
        # Get average response time
        response_time=$(ping -c "$PING_COUNT" -W "$TIMEOUT" "$target_ip" 2>/dev/null | \
                       tail -1 | \
                       awk -F '/' '{print $5}' | \
                       sed 's/ms//' || echo "0")
    fi
    
    cat >> "$TEMP_FILE" << EOF
# HELP net_checker_connectivity Network connectivity check result
# TYPE net_checker_connectivity gauge
net_checker_connectivity{source_hostname="$SOURCE_HOSTNAME",source_ip="$SOURCE_IP",target_hostname="$target_name",target_ip="$target_ip",mode="$MODE",port="",env="$ENV",new_is="$IS",new_instance="$INSTANCE",new_job="$JOB",check_id="$CHECK_ID"} $success

# HELP net_checker_response_time_ms Network response time in milliseconds
# TYPE net_checker_response_time_ms gauge
net_checker_response_time_ms{source_hostname="$SOURCE_HOSTNAME",source_ip="$SOURCE_IP",target_hostname="$target_name",target_ip="$target_ip",mode="$MODE",port="",env="$ENV",new_is="$IS",new_instance="$INSTANCE",new_job="$JOB",check_id="$CHECK_ID"} ${response_time:-0}

EOF
}

# Function to check TCP connectivity
check_tcp() {
    local target_name="$1"
    local target_ip="$2"
    local success=0
    local response_time=0
    
    # Use nc (netcat) for TCP check with timeout
    if command -v nc >/dev/null 2>&1; then
        local start_time=$(date +%s%3N)
        if timeout "$TIMEOUT" nc -z "$target_ip" "$TCP_PORT" >/dev/null 2>&1; then
            local end_time=$(date +%s%3N)
            success=1
            response_time=$((end_time - start_time))
        fi
    else
        # Fallback to bash TCP check
        local start_time=$(date +%s%3N)
        if timeout "$TIMEOUT" bash -c "echo >/dev/tcp/$target_ip/$TCP_PORT" >/dev/null 2>&1; then
            local end_time=$(date +%s%3N)
            success=1
            response_time=$((end_time - start_time))
        fi
    fi
    
    cat >> "$TEMP_FILE" << EOF
# HELP net_checker_connectivity Network connectivity check result
# TYPE net_checker_connectivity gauge
net_checker_connectivity{source_hostname="$SOURCE_HOSTNAME",source_ip="$SOURCE_IP",target_hostname="$target_name",target_ip="$target_ip",mode="$MODE",port="$TCP_PORT",env="$ENV",new_is="$IS",new_instance="$INSTANCE",new_job="$JOB",check_id="$CHECK_ID"} $success

# HELP net_checker_response_time_ms Network response time in milliseconds
# TYPE net_checker_response_time_ms gauge
net_checker_response_time_ms{source_hostname="$SOURCE_HOSTNAME",source_ip="$SOURCE_IP",target_hostname="$target_name",target_ip="$target_ip",mode="$MODE",port="$TCP_PORT",env="$ENV",new_is="$IS",new_instance="$INSTANCE",new_job="$JOB",check_id="$CHECK_ID"} ${response_time:-0}

EOF
}

# Main execution
echo "# Network connectivity check results" > "$TEMP_FILE"
echo "# Generated at: $(date)" >> "$TEMP_FILE"
echo "# Source: $SOURCE_HOSTNAME ($SOURCE_IP)" >> "$TEMP_FILE"
echo "# Mode: $MODE" >> "$TEMP_FILE"
{% if net_checker_mode == 'tcp' %}
echo "# TCP Port: $TCP_PORT" >> "$TEMP_FILE"
{% endif %}
echo "" >> "$TEMP_FILE"

# Check each target host
for target_name in "${!TARGET_HOSTS[@]}"; do
    target_ip="${TARGET_HOSTS[$target_name]}"
    
    case "$MODE" in
        "icmp")
            check_icmp "$target_name" "$target_ip"
            ;;
        "tcp")
            check_tcp "$target_name" "$target_ip"
            ;;
        *)
            echo "Error: Unknown mode $MODE" >&2
            exit 1
            ;;
    esac
done

# Output results
if [[ "$OUTPUT_FILE" == "/dev/stdout" ]]; then
    cat "$TEMP_FILE"
else
    mv "$TEMP_FILE" "$OUTPUT_FILE"
{% if net_checker_work_mode == 1 %}
    # Change ownership for node_exporter
    sudo chown "{{ net_checker_node_exporter_user }}" "$OUTPUT_FILE" 2>/dev/null || true
{% endif %}
fi

# Cleanup
rm -f "$TEMP_FILE"
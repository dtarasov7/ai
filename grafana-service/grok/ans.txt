### Ключевые моменты
- Кажется вероятным, что для создания панели типа table в Grafana, отображающей сервисы, которые не возвращают метрику uptime, можно использовать запрос Prometheus.
- Исследования показывают, что запрос `up{service=~"$srv"} == 0` поможет найти сервисы, не ответившие на запрос Prometheus.
- Доказательства склоняются к тому, что настройка переменной 'srv' на основе данных node_exporter и использование панели table в Grafana 10 с Prometheus 2.31 возможны.

### Настройка панели table
Для создания панели, отображающей сервисы из списка 'srv', которые не вернули метрику uptime, выполните следующие шаги:

#### Шаг 1: Убедитесь в конфигурации Prometheus
- Убедитесь, что каждый целевой сервис в Prometheus имеет метку 'service', соответствующую имени сервиса в systemd.

#### Шаг 2: Настройте переменную 'srv' в Grafana
- Создайте переменную 'srv' с запросом, например, `label_values(node_systemd_unit_state{state="active"}, name)`, чтобы получить список активных сервисов из node_exporter.

#### Шаг 3: Создайте панель table
- Добавьте новую панель table в ваш дашборд.
- Установите источник данных как ваш экземпляр Prometheus.

#### Шаг 4: Настройте запрос
- В редакторе запросов введите: `up{service=~"$srv"} == 0`.
- Включите опцию "Instant" в настройках запроса, чтобы получить текущий статус.

#### Шаг 5: Настройте отображение таблицы
- В настройках панели перейдите в раздел "Table".
- Используйте переопределения полей или трансформации, чтобы отображать только метку 'service'.
- При необходимости скройте другие колонки или настройте отображение.

Эта настройка покажет таблицу со списком сервисов, которые, согласно node_exporter, должны быть активными, но не ответили на последний запрос Prometheus, что означает, что они не вернули метрику uptime.

---

### Отчет: Подробное исследование настройки панели table в Grafana для мониторинга сервисов

#### Введение
Данный отчет детально описывает процесс создания панели типа table в Grafana для отображения сервисов, которые есть в списке 'srv' (полученном на основе данных node_exporter), но не вернули метрику uptime, то есть не ответили на запрос от Prometheus. Учитывая версии Grafana 10 и Prometheus 2.31, мы рассмотрим все аспекты настройки, включая конфигурацию Prometheus, определение переменных и создание панели.

#### Контекст и требования
Пользователь указал, что на сервере работает несколько сервисов, запускаемых через systemd. Через node_exporter получен список этих сервисов, а сами сервисы отдают метрику uptime с меткой 'service', соответствующей имени сервиса в systemd. В дашборде есть переменная 'srv', основанная на данных node_exporter. Необходимо создать панель table, отображающую сервисы из списка 'srv', которые не вернули метрику uptime, то есть не ответили на запрос Prometheus.

#### Анализ метрик и конфигурации
Для решения задачи важно понять, как Prometheus и node_exporter взаимодействуют с сервисами. Node_exporter, при включенном коллекторе systemd (например, с флагом --collector.systemd), предоставляет метрики, такие как 'node_systemd_unit_state', которые позволяют получить список активных сервисов. В данном случае переменная 'srv' вероятно определена запросом вроде `label_values(node_systemd_unit_state{state="active"}, name)`, что дает список имен активных сервисов.

С другой стороны, каждый сервис, предположительно, является отдельной целью (target) в Prometheus и отдает метрику uptime с меткой 'service'. Для определения, ответил ли сервис на запрос Prometheus, используется метрика 'up', которая является стандартной метрикой Prometheus, показывающей, успешен ли был последний скрейп (1 - успешен, 0 - не успешен). Если 'up == 0', значит, сервис не ответил, и, соответственно, не вернул метрику uptime.

#### Настройка Prometheus
Важно, чтобы в конфигурации Prometheus каждая цель (target) имела метку 'service', соответствующую имени сервиса. Это можно настроить через статические конфигурации или relabeling. Например, в prometheus.yml может быть указано:

```yaml
- job_name: 'services'
  static_configs:
  - targets: ['localhost:9101']
    labels:
      service: 'service1'
  - targets: ['localhost:9102']
    labels:
      service: 'service2'
```

Это обеспечит, что метрика 'up' будет иметь метку 'service', что позволит фильтровать по ней в запросах.

#### Определение переменной 'srv'
Переменная 'srv' в Grafana должна содержать список сервисов, полученных из node_exporter. На основе документации, метрика 'node_systemd_unit_state' имеет метки, такие как 'name' и 'state'. Для получения активных сервисов можно использовать запрос:

```
label_values(node_systemd_unit_state{state="active"}, name)
```

Этот запрос вернет список имен сервисов, которые находятся в состоянии "active", что соответствует списку 'srv'.

#### Создание панели table
В Grafana 10 панель table поддерживает отображение результатов запросов Prometheus, особенно с использованием опции "Instant" для получения текущего состояния. Для отображения сервисов, не ответивших на запрос, используется запрос:

```
up{service=~"$srv"} == 0
```

Здесь:
- `up` - метрика, показывающая статус скрейпа.
- `service=~"$srv"` - фильтр по метке 'service', где '$srv' - переменная, содержащая список сервисов, разделенных запятыми.
- `== 0` - условие, что скрейп не удался.

Эта комбинация вернет все серии, где 'up' равно 0, то есть сервисы, не ответившие на запрос. В панели table каждая серия будет отображена как строка, с метками, такими как 'service', 'job', 'instance' и значением 0.

#### Настройка отображения
В настройках панели table можно настроить отображение, чтобы показывать только метку 'service'. Это делается через:
- Переход в раздел "Field" в настройках панели.
- Скрытие ненужных колонок, оставив только 'service'.
- При необходимости можно использовать трансформации, такие как "Organize fields", чтобы переименовать или отфильтровать поля.

Например, таблица может выглядеть так:

| service    |
|------------|
| service1   |
| service2   |

Это покажет список сервисов, которые не вернули метрику uptime.

#### Учет версий
Версии Grafana 10 и Prometheus 2.31 поддерживают все описанные функции. Grafana 10 включает улучшенные возможности для панелей table, такие как мгновенные запросы и трансформации, а Prometheus 2.31 поддерживает стандартные метрики, такие как 'up', с необходимыми метками. Нет известных ограничений или изменений, связанных с этими версиями, которые бы повлияли на предложенное решение.

#### Дополнительные соображения
Хотя основной подход использует метрику 'up', стоит отметить, что теоретически возможны случаи, когда скрейп успешен ('up == 1'), но метрика uptime отсутствует. Однако, учитывая формулировку пользователя ("вообще не ответили на запрос от prometheus"), предполагается, что интерес представляют именно случаи, когда скрейп не удался, что соответствует 'up == 0'. Это подтверждается документацией и примерами из сообщества, где 'up == 0' используется для определения неработающих целей.

#### Таблица: Сравнение подходов
Ниже приведена таблица, сравнивающая возможные подходы к решению задачи:

| Подход                  | Преимущества                              | Недостатки                              |
|-------------------------|-------------------------------------------|-----------------------------------------|
| Использование 'up == 0' | Простота, стандартная метрика, точность   | Требует правильной настройки меток      |
| Проверка отсутствия uptime | Более детализированно                    | Сложнее реализовать для множества сервисов |
| Использование плагинов  | Визуально привлекательно                 | Может потребовать дополнительных установок |

#### Заключение
Предложенный подход, использующий запрос `up{service=~"$srv"} == 0` с панелью table в Grafana, является эффективным решением для отображения сервисов, не вернувших метрику uptime. Он учитывает версии Grafana 10 и Prometheus 2.31, обеспечивая совместимость и простоту реализации. Настройка переменной 'srv' на основе node_exporter и правильная конфигурация меток в Prometheus являются ключевыми шагами для успеха.

### Ключевые цитирования
- [Monitoring Linux host metrics with the Node Exporter Prometheus](https://prometheus.io/docs/guides/node-exporter/)
- [How to properly display up/down status Grafana Community Forums](https://community.grafana.com/t/how-to-properly-display-up-down-status/17023)
- [How to describe a grafana dashboard displaying systemd units Stack Overflow](https://stackoverflow.com/questions/58387742/how-to-describe-a-grafana-dashboard-displaying-systemd-units)

Да, в **Grafana 10** можно построить таблицу, где будут отображаться:

| Service Name | Ожидаемая версия | Реальная версия |
|--------------|------------------|-----------------|

Где:
- **Имя сервиса и ожидаемая версия** берутся из внешнего JSON-файла.
- **Реальная версия** получается из метрики Prometheus (например, `info{version="..."}` или аналогичной).

---

## 🔧 Техническая реализация

### 📁 Шаг 1: Подготовьте JSON с ожидаемыми версиями

Пример структуры JSON-файла (`versions.json`):

```json
{
  "service-a": "v1.2.3",
  "service-b": "v2.0.1",
  "service-c": "v3.4.5"
}
```

---

## 🌐 Шаг 2: Настройка источника данных для JSON

В Grafana **нельзя напрямую загрузить локальный JSON-файл**, но есть несколько способов обойти это:

### ✅ Вариант 1: Использовать [**HTTP API Datasource**](https://grafana.com/grafana/plugins/yesoreyeram-infinity-datasource/) (рекомендуется)

Установите плагин **Infinity Datasource**:

```bash
grafana-cli plugins install yesoreyeram-infinity-datasource
```

После установки:

1. Добавьте источник данных типа **Infinity**.
2. Укажите URL к вашему JSON-файлу (он должен быть доступен по HTTP).
   - Можно положить его на любой простой HTTP-сервер или использовать Nginx, Python SimpleHTTPServer и т.д.
3. Пропишите преобразование JSON, чтобы получить данные в виде таблицы.

Пример настройки запроса в Infinity:

```yaml
Source: URL
URL: http://yourserver.local/versions.json
Type: JSON
Root selector: "$"
Columns:
  - Key: "key" -> "Service Name"
  - Value: "value" -> "Expected Version"
```

---

### ✅ Вариант 2: Использовать переменную + CSV (альтернатива)

Если нет возможности раздавать JSON через HTTP, вы можете:

1. Преобразовать JSON в CSV формат.
2. Загрузить как **CSV-файл** в папку Grafana.
3. Использовать **Node Graph datasource** или **Transformations** вручную.

---

## 📈 Шаг 3: Получение реальной версии из Prometheus

Предположим, у вас есть метрика:

```promql
info{service="<name>", version="<real_version>"}
```

Тогда запрос будет таким:

```promql
avg by (service, version) (info)
```

---

## 🔄 Шаг 4: Объединение данных в одной таблице

В Grafana:

1. Создайте новую панель типа **Table**.
2. В запрос добавьте:
   - Запрос к **Infinity Datasource** (ваш JSON с ожидаемыми версиями).
   - Запрос к **Prometheus** для получения реальных версий.
3. Перейдите на вкладку **Transform**.
4. Используйте **Join / Merge** или **Merge fields* для объединения двух источников по полю `Service Name`.

---

## 🛠️ Пример Transform:

1. Выберите **Join / Merge**:
   - Mode: **Inner Join**
   - Field name: `Service Name`
2. Сгруппируйте поля:
   - `Service Name`, `Expected Version`, `version` → переименуйте в `Real Version`

---

## ✅ Результат

Вы получите таблицу следующего вида:

| Service Name | Expected Version | Real Version |
|--------------|------------------|--------------|
| service-a    | v1.2.3           | v1.2.2       |
| service-b    | v2.0.1           | v2.0.1       |
| service-c    | v3.4.5           | —            |

> Если версия не найдена в Prometheus, то соответствующее поле может быть пустым или заполнено как `N/A`.

---

## 📝 Примечания

- Для автоматизации обновления списка ожидаемых версий можно использовать CI/CD, который регулярно обновляет JSON-файл.
- Если вам нужно показывать только те сервисы, у которых **ожидаемая версия ≠ реальная**, добавьте фильтрацию в Transform.
- Если используется Alerting — можно создать алерт при расхождении версий.

---

Хочешь, чтобы я помог тебе составить конкретный пример запроса под твой JSON и метрики? Можешь прислать пример JSON и вывода метрики `info`.
